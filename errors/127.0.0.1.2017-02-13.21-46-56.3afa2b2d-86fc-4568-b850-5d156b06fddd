(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Invalid URI string in DAL"
p3
sS'layer'
p4
S'/Applications/web2py.app/Contents/Resources/applications/SistemaDesechos/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    db = DAL(myconf.get(\'db.uri\'),\n             pool_size=myconf.get(\'db.pool_size\'),\n             migrate_enabled=myconf.get(\'db.migrate\'),\n             check_reserved=[\'all\'])\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.settings.extra_fields[\'auth_user\'] = [\n   Field(\'autorizado\', default=\'False\', writable=False, readable=False),\n   Field(\'cargo\', readable = False),\n   #Field(\'f_espaciofisico\'),\n   #Field(\'f_seccion\'),\n   #Field(\'f_laboratorio\')\n]\n\nauth.define_tables(username=False, signature=False)\ndb.auth_user.cargo.requires = IS_IN_DB(db, db.auth_group.id, \'%(role)s\')\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = False\n\n# Evita crear grupos al registar\nauth.settings.create_user_groups = None\n# Grupo default registro - id cambia?\nauth.settings.everybody_group_id = auth.id_group(role="Usuario Normal")\n\n# Deshabilitar registro y otras paginas\n#auth.settings.actions_disabled.append(\'register\')\n#auth.settings.actions_disabled.append(\'profile\')\n#auth.settings.actions_disabled.append(\'change_password\')\nauth.settings.actions_disabled.append(\'impersonate\')\n#auth.settings.actions_disabled.append(\'groups\')\n####################################################################\n\nfrom gluon.tools import Crud\ncrud = Crud(db)\n\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\n# auth.enable_record_versioning(db)\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n\n# Se define aqui para poder usarla en\ndb.define_table(\'t_users_pendientes\',\n    Field(\'f_email\', \'string\', label=T(\'Email\')),\n    Field(\'f_group\', \'integer\', label=T(\'Privilegio\'), requires=IS_IN_DB(db, db.auth_group.id, \'%(role)s (%(id)s)\'), represent = lambda value,row: str(db(db.auth_group.id == value).select(db.auth_group.role))[17:]),\n    migrate=settings.migrate)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Applications/web2py.app/Contents/Resources/gluon/restricted.py", line 227, in restricted\n  File "/Applications/web2py.app/Contents/Resources/applications/SistemaDesechos/models/db.py", line 34, in <module>\n  File "/Applications/web2py.app/Contents/Resources/gluon/packages/dal/pydal/base.py", line 174, in __call__\n  File "/Applications/web2py.app/Contents/Resources/gluon/packages/dal/pydal/base.py", line 446, in __init__\n  File "/Applications/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n  File "/Applications/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/postgres.py", line 121, in __init__\nSyntaxError: Invalid URI string in DAL\n'
p11
s.