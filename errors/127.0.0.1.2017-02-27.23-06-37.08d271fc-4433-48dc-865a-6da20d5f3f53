(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'None'"
p3
sS'layer'
p4
S'/home/jignaciopm/Descargas/web2py/applications/SIGULAB/controllers/sustancias.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nfrom gluon.tools import Crud\n\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef validar_bitacora(form):\n    #estado = form.vars.extra\n\n    #if estado in [\'L\',\'Kg\']:\n    #    form.vars.f_cantidad = form.vars.f_cantidad*1000\n\n    espF = request.vars[\'esp\']\n    sust = request.vars[\'sust\']\n    total = float(str(db((db.t_inventario.f_sustancia == sust)&(db.t_inventario.f_espaciofisico == espF)).select(db.t_inventario.f_cantidadusointerno))[33:-2])\n\n    if form.vars.f_cantidad == 0:\n        form.errors.f_cantidad = T(\'Introduzca un ingreso o consumo\')\n    else:\n\n        if \'edit\' in request.args:\n            actual = db(db.t_bitacora.id == request.args[3])\n            proceso = str(actual.select(db.t_bitacora.f_proceso))[22:-2]\n            actual.select().first().update_record(f_fecha = request.now)\n\n            if proceso in [\'Suministro del Almacen\',\'Compra\',\'Prestamo\',\'Donacion\']:\n                ingreso = float(str(actual.select(db.t_bitacora.f_ingreso))[22:-2])\n                delta = form.vars.f_cantidad - ingreso\n                form.vars.f_ingreso = form.vars.f_cantidad\n                form.vars.f_cantidad = total + delta\n            else:\n                consumo = float(str(actual.select(db.t_bitacora.f_consumo))[22:-2])\n                delta = form.vars.f_cantidad - consumo\n                form.vars.f_consumo = form.vars.f_cantidad\n                form.vars.f_cantidad = total - delta\n\n        else:\n            if form.vars.f_proceso in [\'Suministro del Almacen\',\'Compra\',\'Prestamo\',\'Donacion\']:\n                form.vars.f_ingreso = form.vars.f_cantidad\n                form.vars.f_cantidad = form.vars.f_ingreso + total\n            else:\n                if form.vars.f_cantidad > total:\n                    form.errors.f_cantidad = T(\'No puede consumir m\xc3\xa1s de la cantidad disponible\')\n                else:\n                    form.vars.f_consumo = form.vars.f_cantidad\n                    form.vars.f_cantidad = total - form.vars.f_consumo\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef validar_inventario(form):\n        count = db( (db.t_inventario.f_sustancia == form.vars.f_sustancia)&(db.t_inventario.f_espaciofisico == request.vars[\'esp\'])).count()\n        if (count > 0):\n            form.errors.f_sustancia = T(\'Ya existe esta sustancia en el inventario\')\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef insert_bitacora(form):\n    espF = request.vars[\'esp\']\n    sust = request.vars[\'sust\']\n    new  = float(str(db((db.t_bitacora.f_sustancia == sust)&(db.t_bitacora.f_espaciofisico == espF)).select(db.t_bitacora.f_cantidad).last())[20:-2])\n    row = db((db.t_inventario.f_espaciofisico == espF)&(db.t_inventario.f_sustancia == sust)).select().first()\n    row.update_record(f_cantidadusointerno=new)\n    row.update_record(f_total = row.f_cantidadusointerno+row.f_cantidadonacion)\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef insert_inventario(form):\n    espF = request.vars[\'esp\']\n    espFS = str(db(db.t_espaciofisico.id == espF).select(db.t_espaciofisico.f_espacio))[27:-2]\n    db.t_bitacora.insert(f_fechaingreso=request.now,\n                                    f_sustancia=form.vars.f_sustancia,\n                                    f_proceso="Suministro de Almacen",\n                                    f_ingreso=form.vars.f_cantidadusointerno,\n                                    f_consumo=0,\n                                    f_cantidad=form.vars.f_cantidadusointerno,\n                                    f_espaciofisico = espF)\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef sustanciapeligrosa_manage():\n    if(auth.has_membership(\'Gestor de Sustancias\') or \\\n    auth.has_membership(\'Director\') or\\\n    auth.has_membership(\'WebMaster\')):\n        table = SQLFORM.smartgrid(db.t_sustancias,onupdate=auth.archive,details=False,links_in_grid=False,csv=False,user_signature=True)\n    else:\n        table = SQLFORM.smartgrid(db.t_sustancias,editable=False,deletable=False,csv=False,links_in_grid=False,create=False)\n    return locals()\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef select_inventario():\n    espacios=False\n    labs=False\n    secciones=False\n\n    if (auth.has_membership(\'Gestor de Sustancias\') or auth.has_membership(\'Director\') or auth.has_membership(\'WebMaster\')):\n        espacios = db(db.t_inventario.f_espaciofisico == db.t_espaciofisico.id).select(db.t_espaciofisico.ALL,groupby=db.t_espaciofisico.id,orderby=[db.t_espaciofisico.f_seccion,db.t_espaciofisico.f_espacio])\n        secciones = db(db.t_inventario.f_seccion == db.t_seccion.id).select(db.t_seccion.ALL,distinct=db.t_seccion.id)\n        labs = db(db.t_inventario.f_laboratorio == db.t_laboratorio.id).select(db.t_laboratorio.ALL,distinct=db.t_laboratorio.id)\n    elif (auth.has_membership(\'Jefe de Laboratorio\') ):\n        espacios = db( (db.t_laboratorio.f_jefe == auth.user.id)&(db.t_seccion.f_laboratorio == db.t_laboratorio.id)&(db.t_espaciofisico.f_seccion == db.t_seccion.id)&(db.t_espaciofisico.id == db.t_inventario.f_espaciofisico) ).select(db.t_espaciofisico.ALL,distinct=db.t_espaciofisico.id)#,orderby=db.t_espaciofisico.f_seccion)\n        secciones = db((db.t_laboratorio.f_jefe == auth.user.id)&(db.t_seccion.f_laboratorio == db.t_laboratorio.id)&(db.t_seccion.id == db.t_inventario.f_seccion) ).select(db.t_seccion.ALL,distinct=db.t_seccion.id)\n        labs = db(db.t_laboratorio.f_jefe == auth.user.id).select(db.t_laboratorio.ALL)\n    elif (auth.has_membership(\'Jefe de Secci\xc3\xb3n\') ):\n        espacios = db((db.t_espaciofisico.f_seccion == db.t_seccion.id)&(db.t_seccion.f_jefe == auth.user.id)).select(db.t_espaciofisico.ALL,orderby=[db.t_espaciofisico.f_seccion,db.t_espaciofisico.f_espacio])\n        secciones = db(db.t_seccion.f_jefe == auth.user.id ).select(db.t_seccion.ALL)\n    else:\n        espacios = db((db.t_tecs_esp.f_tecnico == auth.user.id)&(db.t_espaciofisico.id == db.t_tecs_esp.f_espaciofisico)).select(db.t_espaciofisico.ALL,orderby=[db.t_espaciofisico.f_seccion,db.t_espaciofisico.f_espacio])\n\n\n\n    return locals()\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef inventario_lab():\n\n    lab = str(db(db.t_laboratorio.id == request.vars[\'lab\']).select(db.t_laboratorio.f_nombre))[24:-2]\n    query = db.v_laboratorio.f_laboratorio == str(request.vars[\'lab\'])\n    table = SQLFORM.smartgrid(db.v_laboratorio,constraints=dict(v_laboratorio=query),csv=False,editable=False,deletable=False,create=False)\n    return locals()\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef inventario_seccion():\n\n    if request.vars[\'secc\'] == \'t\':\n        db.v_seccion.f_seccion.readable = True\n        db.v_seccion.f_sustancia.readable = False\n        lab = str(db(db.t_laboratorio.id == request.vars[\'lab\']).select(db.t_laboratorio.f_nombre))[24:-2]\n        sust = str(db(db.t_sustancias.id == request.vars[\'sust\']).select(db.t_sustancias.f_nombre))[23:-2]\n        query = (db.v_seccion.f_laboratorio == request.vars[\'lab\'])&(db.v_seccion.f_sustancia == sust)\n        table = SQLFORM.smartgrid(db.v_seccion,constraints=dict(v_seccion=query),csv=False,editable=False,deletable=False,create=False)\n        seccion = False\n        sustancia = str(db(db.t_sustancias.id == request.vars[\'sust\']).select(db.t_sustancias.f_nombre))[23:]\n        return locals()\n\n    sustancia = False\n    secc = request.vars[\'secc\']\n    seccion = str(db(db.t_seccion.id == secc).select(db.t_seccion.f_seccion))[21:-2]\n    lab = str(db(db.t_seccion.id == secc).select(db.t_seccion.f_laboratorio))[25:-2]\n    query = (db.v_seccion.f_laboratorio == lab)&(db.v_seccion.f_seccion == secc)\n    lab = str(db( db.t_laboratorio.id == lab ).select(db.t_laboratorio.f_nombre))[24:-2]\n    table = SQLFORM.smartgrid(db.v_seccion,constraints=dict(v_seccion=query),csv=False,editable=False,deletable=False,create=False)\n    return locals()\n\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef inventario_manage():\n    #cheqeuar que no agreguen lo mismo\n    sustancia = False\n    labs = False\n    seccion = False\n    espFisico = False\n\n    espF = request.vars[\'esp\']\n    query = db.t_inventario.f_espaciofisico == espF\n    db.t_inventario.f_espaciofisico.default = espF\n\n    if request.vars[\'esp\']:\n        seccion = str(db((db.t_espaciofisico.id == request.vars[\'esp\'])&(db.t_seccion.id == db.t_espaciofisico.f_seccion)).select(db.t_seccion.f_seccion))[21:-2]\n        labs = str( db((db.t_seccion.f_seccion == seccion)&(db.t_laboratorio.id == db.t_seccion.f_laboratorio) ).select(db.t_laboratorio.f_nombre) )[24:-2]\n        espFisico = str( db(db.t_espaciofisico.id == espF).select(db.t_espaciofisico.f_espacio) )[27:-2]\n\n    if (request.vars[\'secc\']):\n        labs = str(db((db.t_seccion.id == request.vars[\'secc\'])&(db.t_laboratorio.id == db.t_seccion.f_laboratorio)).select(db.t_laboratorio.f_nombre))[24:-2]\n        seccion = str(db(db.t_seccion.id == request.vars[\'secc\']).select(db.t_seccion.f_seccion))[21:]\n        db.t_inventario.f_espaciofisico.readable = True\n        if (request.vars[\'sust\']):\n            sustancia = str(db(db.t_sustancias.id == request.vars[\'sust\']).select(db.t_sustancias.f_nombre))[23:]\n            query = (db.t_inventario.f_seccion == request.vars[\'secc\'])&(db.t_inventario.f_sustancia == request.vars[\'sust\'])\n        else:\n            query = (db.t_inventario.f_seccion == request.vars[\'secc\'])\n        table = SQLFORM.smartgrid(db.t_inventario,constraints=dict(t_inventario=query),onupdate=auth.archive,editable=False,\n        orderby=[db.t_inventario.f_espaciofisico,db.t_inventario.f_sustancia],create=False,csv=False,deletable=False,links_in_grid=False)\n        return locals()\n\n    table = SQLFORM.smartgrid(db.t_inventario,constraints=dict(t_inventario=query),create=(not auth.has_membership(\'T\xc3\xa9cnico\') and not auth.has_membership(\'Usuario Normal\')),links_in_grid=False,csv=False,editable=False,deletable=False,oncreate=insert_inventario,\n    onvalidation=validar_inventario)\n    return locals()\n\n###################################################\n@auth.requires(not auth.has_membership(\'Usuario Normal\'))\n@auth.requires_login()\ndef view_bitacora():\n    sust = request.vars[\'sust\']\n    espF = request.vars[\'esp\']\n    name = str(db(db.t_sustancias.id == sust).select(db.t_sustancias.f_nombre))[22:]\n    espacio = str(db(db.t_espaciofisico.id == espF).select(db.t_espaciofisico.f_espacio))[27:]\n    total = str(db((db.t_inventario.f_sustancia == sust)&(db.t_inventario.f_espaciofisico == espF)).select(db.t_inventario.f_cantidadusointerno))[34:]\n    db.t_bitacora.f_sustancia.default = sust\n    db.t_bitacora.f_espaciofisico.default = espF\n    db.t_bitacora.f_espaciofisico.readable = False\n    query = (db.t_bitacora.f_sustancia == sust)&(db.t_bitacora.f_espaciofisico == espF)\n\n    if (\'new\' in request.args):\n        db.t_bitacora.f_consumo.readable = False\n        db.t_bitacora.f_consumo.writable = False\n        db.t_bitacora.f_ingreso.readable = False\n        db.t_bitacora.f_ingreso.writable = False\n        db.t_bitacora.f_cantidad.writable = True\n\n    if (\'view\' in request.args):\n        db.t_bitacora.f_descripcion.readable = True\n        db.t_bitacora.f_cantidad.readable = False\n\n    if \'edit\' in request.args:\n        db.t_bitacora.f_consumo.readable = False\n        db.t_bitacora.f_consumo.writable = False\n        db.t_bitacora.f_ingreso.readable = False\n        db.t_bitacora.f_ingreso.writable = False\n        db.t_bitacora.f_cantidad.writable = True\n        db.t_bitacora.f_proceso.writable = False\n        row = db(db.t_bitacora.id == request.args[3]).select().first()\n        if row.f_ingreso == 0:\n            row.update_record(f_cantidad = row.f_consumo)\n        else:\n            row.update_record(f_cantidad = row.f_ingreso)\n\n    table = SQLFORM.smartgrid(db.t_bitacora,constraints=dict(t_bitacora=query),oncreate=insert_bitacora,\n    orderby=[~db.t_bitacora.f_fechaingreso,db.t_bitacora.f_fecha],csv=False,links_in_grid=False,deletable=False,\n    user_signature=True,onvalidation=validar_bitacora,paginate=10,onupdate=insert_bitacora)\n\n    #if (\'new\' in request.args):\n    #    estado  = str(db((db.t_sustancias.id == sust)&(db.t_estado.id == db.t_sustancias.f_estado)).select(db.t_estado.f_estado))[19:-2]\n    #    if estado == \'S\xc3\xb3lido\':\n    #        extra = CENTER(\'Unidades:\',SELECT(\'g\',\'Kg\'))\n    #else:\n    #        extra = CENTER(\'Unidades:\',SELECT(\'mL\',\'L\'))\n    #    table[0].insert(1,extra)\n\n\n    return locals()\n\nresponse._vars=response._caller(inventario_manage)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jignaciopm/Descargas/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/jignaciopm/Descargas/web2py/applications/SIGULAB/controllers/sustancias.py", line 250, in <module>\n  File "/home/jignaciopm/Descargas/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jignaciopm/Descargas/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/jignaciopm/Descargas/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/jignaciopm/Descargas/web2py/applications/SIGULAB/controllers/sustancias.py", line 176, in inventario_manage\n    seccion = str(db((db.t_espaciofisico.id == request.vars[\'esp\'])&(db.t_seccion.id == db.t_espaciofisico.f_seccion)).select(db.t_seccion.f_seccion))[21:-2]\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 351, in represent\n    return BaseAdapter.represent(self, obj, fieldtype)\n  File "/home/jignaciopm/Descargas/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'None\'\n'
p11
s.